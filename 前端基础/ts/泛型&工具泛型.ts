/**
 * 泛型 & 工具泛型理解
 */

 /**
  * 泛型: 意义在于做到类型重用, 通常用在函数, 接口, 和类中对成员进行约束;
  * ts 中使用<T>的形式来表示结构为一个泛型
  * 声明的时候: T是一个未确定的类型
  * 运行的时候: T会被指定一个类型, 相当于一个参数
  */

// 当函数、接口、类是接受多个类型参数的时候,我们可以用泛型提高类型可重用性
// 不然要声明一大堆类型

// 示例
// 生成一个类型数组
function createArray<T>(value: T, n: number = 10) : T[] {
  // 生成一个数组由 value 类型组成的数组
  let arr: T[]
  for (let index = 0; index < n; index++) {
    arr.push(value)
  }
  return arr
}

