// ************** 算法题思路 ****************

/**
 * 数据结构储存
 * 1.顺序存储: 数组
 * 2.链表存储: 链表
 */

// 数组:
// 由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。
// 但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；
// 而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。

// 链表:
// 因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；
// 如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。
// 但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；
// 而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。

/**
 * 数据结构基本操作: 遍历 + 访问 === 增删查改
 * 数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改
 * 两种方式: 
 * 线性 === for/while 迭代为代表;
 * 非线性 === 递归为代表
 * 先练习 ·树· 结构
 */
