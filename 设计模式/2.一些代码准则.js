/**
 * 代码质量的一些评判标准
 */

// 1.可维护性: maintainability
// 代码分层清晰、模块化好、高内聚低耦合、遵从基于接口而非实现编程的设计原则

// 2.可读性: readability
// 代码是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等等

// 3.扩展性: extensibility
// 代码预留了一些功能扩展点，你可以把新功能代码，直接插到扩展点上

// 4.灵活性（flexibility
// 现有功能代码组合 来实现新的功能

// 5.简洁性（simplicity）

// 6.可复用性（reusability
// 尽量减少重复代码的编写，复用已有的代码

// 7.可测试性（testability）

/**
 * 面向对象、设计原则、设计模式、编程规范、重构之间的关系
 */
// 面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，
// 是很多设计原则、设计模式等编码实现的基础。

// 设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。
// 比如，“开闭原则”是很多设计模式（策略、模板等）的指导原则。

// 设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。
// 应用设计模式的主要目的是提高代码的可扩展性。从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行。

// 编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节、更加能落地。持续的小重构依赖的理论基础主要就是编程规范。

// 重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。

// 总结:
// 面向对象是基础
// 设计原则是抽象指导
// 设计模式是具体指导
// 编程规范是细节,保障可读性
// 重构是利用以上4点来提高代码质量
