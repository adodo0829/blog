// **********重构: 对软件内部结构的改善,优化代码接口 *************

/**
 * 1.重构的目的
 * 保持功能不变的前提下，利用设计思想、原则、模式、编程规范等理论来优化代码，修改设计上的不足，提高代码质量
 */

/**
 * 2.重构的对象
 * 大规模重构: 对顶层代码设计的重构, 需要进行代码分层、模块化、解耦、抽象可复用组件等
 * 小规模重构: 对代码细节的重构，主要是针对类、函数、变量等代码级别的重构，比如规范命名、规范注释、消除超大类或函数、提取重复代码等
 */

/**
 * 3.重构的时机
 * 策略: 持续重构, 保持重构意识
 */

/**
 * 4.重构的方式
 * 大规模高层次的重构难度比较大，需要组织、有计划地进行，分阶段地小步快跑，时刻让代码处于一个可运行的状态。
 * 借助工具, 如eslint来统一style
 * 小规模低层次的重构，因为影响范围小，改动耗时短，所以，只要你愿意并且有时间，随时随地都可以去做
 */

/**
 * 5.重构的手段
 * - 解耦 (如果代码牵一发而动全身, 必定是耦合度太高了)
 * 根据依赖关系图的复杂性来判断
 * how to 解耦? 
 * // 封装和抽象
 * // 中间层(解耦依赖关系)
 * // 模块化, 分而治之
 * // 设计思想与原则 (单一, 依赖注入, 组合替代继承...)
 */

// ******* 编码规范 *********
/**
 * 1.命名: 
 * 合适的长度,准确达意; 利用上下文(函数作用域)简化命名; 命名要可读、可搜索, 简易能接受; 抽象类命名开头标识如Interface
 * 
 * 2.注释
 * 做什么, 为什么, 怎么做的
 * 
 * 3.代码长度,排序控制(类,函数)
 * 
 * 4.一些小技巧
 * 将复杂的逻辑提炼拆分成函数和类。
 * 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。
 * 函数中不要使用参数来做代码执行逻辑的控制。
 * 函数设计要职责单一。
 * 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，
 * 调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。
 * 用字面常量取代魔法数。
 * 
 * 5.code review关注点
 * - 目录设置合理, 模块划分清晰, 代码结构内聚耦合程度
 * - 是否遵循相关设计原则和思想, SLOID, DRY, KISS等...
 * - 设计模式使用, 是否有过度设计的问题
 * - 是否容易扩展, 添加新功能是否易实现
 */