// 对象: 数据实体(属性和行为)

// 类: 用来生成构造数据实体, 也就是对象
// 超类(父类) =》 子类

// **************基本概念****************
// 抽象: 反映真实对象的内容模型
// 封装: 一个对象对其他对象隐藏内部细节,对外暴露对象接口
        // 隐藏的级别: 自己, 父类, 公共
// 继承: 子类继承负父类的属性和方法
        // 代码复用
// 多态: 够检测对象所属的实际类，并在当前上下文不知道其真实类型的情况下调用其实现的能力
    // 不同子类重写了基类的方法, 调用时可以触发不同的行为
    // 不管你是那个类, 只需要有方法就行

// *************** 对象之间的关系 *****************
// 1.继承
// 2.实现
// 3.依赖 修改一个类对另一个产生影响
// 4.关联 一个对象使用另一对象或与另一对象进行交互的关系
// 5.聚合 一种特殊类型的关联，用于表示多个对象之间的“一对多”、“多对多”或“整体对部分”的关系
// 6.组合 是一种特殊类型的聚合，其中一个对象由一个或多个其他对象实例构成, 是一个容器


// *********** 模式分类 *************
// 根据模式的目的来分类
// 创建型: 提供创建对象的机制, 提升代码灵活性和复用度
// 结构型: 如何将对象和类组装成较大的结构, 并同时保持结构的灵活和高效
// 行为型: 负责对象间的高效沟通和职责委派